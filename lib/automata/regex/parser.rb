#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.7.3
# from Racc grammar file "parser.y".
#

require 'racc/parser.rb'
module Regex
  class Parser < Racc::Parser

  require "strscan"

  def initialize(str)
    @str = StringScanner.new(str)

    super()
  end

  def parse
    do_parse
  end

  def next_token
    return if @str.eos?

    case
      when char = @str.scan(/[a-z]/i)
        [:CHAR, char]
      when @str.scan(/\(/)
        [:LPAREN, "("]
      when @str.scan(/\)/)
        [:RPAREN, ")"]
      when @str.scan(/\|/)
        [:BAR, "|"]
      when @str.scan(/\*/)
        [:STAR, "*"]
      when @str.scan(/\+/)
        [:PLUS, "+"]
      when @str.scan(/\?/)
        [:QUESTION, "?"]
      else
        raise "scanner error"
    end
  end
##### State transition tables begin ###

racc_action_table = [
    15,    12,    14,    13,    15,    23,    12,    21,    13,    17,
    18,    19,    12,    12,    13,    13,    12,   nil,    13 ]

racc_action_check = [
    20,     0,     1,     0,     1,    20,     3,    14,     3,     9,
     9,     9,    12,    15,    12,    15,    22,   nil,    22 ]

racc_action_pointer = [
    -5,     2,   nil,     0,   nil,   nil,   nil,   nil,   nil,     6,
   nil,   nil,     6,   nil,     7,     7,   nil,   nil,   nil,   nil,
    -2,   nil,    10,   nil ]

racc_action_default = [
   -18,   -18,    -1,    -2,    -4,    -5,    -7,    -8,    -9,   -10,
   -14,   -15,   -18,   -17,   -18,   -18,    -6,   -11,   -12,   -13,
   -18,    24,    -3,   -16 ]

racc_goto_table = [
    16,     1,    22,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    20,   nil,   nil,   nil,   nil,   nil,    16 ]

racc_goto_check = [
     5,     1,     3,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     1,   nil,   nil,   nil,   nil,   nil,     5 ]

racc_goto_pointer = [
   nil,     1,   nil,   -13,   nil,    -3,   nil,   nil,   nil,   nil,
   nil,   nil ]

racc_goto_default = [
   nil,   nil,     2,     3,     4,     5,     6,     7,     8,     9,
    10,    11 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 10, :_reduce_none,
  1, 10, :_reduce_none,
  3, 11, :_reduce_3,
  1, 12, :_reduce_none,
  1, 12, :_reduce_none,
  2, 13, :_reduce_6,
  1, 14, :_reduce_none,
  1, 14, :_reduce_none,
  1, 14, :_reduce_none,
  1, 14, :_reduce_none,
  2, 15, :_reduce_11,
  2, 16, :_reduce_12,
  2, 17, :_reduce_13,
  1, 18, :_reduce_none,
  1, 18, :_reduce_15,
  3, 19, :_reduce_16,
  1, 20, :_reduce_none ]

racc_reduce_n = 18

racc_shift_n = 24

racc_token_table = {
  false => 0,
  :error => 1,
  :BAR => 2,
  :STAR => 3,
  :QUESTION => 4,
  :PLUS => 5,
  :LPAREN => 6,
  :RPAREN => 7,
  :CHAR => 8 }

racc_nt_base = 9

racc_use_result_var = false

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]
Ractor.make_shareable(Racc_arg) if defined?(Ractor)

Racc_token_to_s_table = [
  "$end",
  "error",
  "BAR",
  "STAR",
  "QUESTION",
  "PLUS",
  "LPAREN",
  "RPAREN",
  "CHAR",
  "$start",
  "regex",
  "union",
  "simpleregex",
  "concatenation",
  "basicregex",
  "star",
  "question",
  "plus",
  "elementaryregex",
  "group",
  "char" ]
Ractor.make_shareable(Racc_token_to_s_table) if defined?(Ractor)

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

def _reduce_3(val, _values)
 Union.new(val[0], val[2])
end

# reduce 4 omitted

# reduce 5 omitted

def _reduce_6(val, _values)
 Concatenate.new(val[0], val[1])
end

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

def _reduce_11(val, _values)
 Closure.new(val[0])
end

def _reduce_12(val, _values)
 Maybe.new(val[0])
end

def _reduce_13(val, _values)
 OneOrMore.new(val[0])
end

# reduce 14 omitted

def _reduce_15(val, _values)
 Symbol.new(val[0])
end

def _reduce_16(val, _values)
 val[1]
end

# reduce 17 omitted

def _reduce_none(val, _values)
  val[0]
end

  end   # class Parser
end   # module Regex
